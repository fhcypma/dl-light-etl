# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: ubuntu-latest

name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  project: dl-light
  feed: dl-light-etl
  ${{ if eq( variables['Build.SourceBranchName'], 'main' ) }}: 
    buildTag: dev$(Build.BuildNumber)
  ${{ if ne( variables['Build.SourceBranchName'], 'main' ) }}: 
    buildTag: $(Build.BuildNumber)

stages:
# - stage: Test
#   jobs:
#   - job: Test

#     strategy:
#       matrix:
#         Python39:
#           python.version: '3.9'
#         Python310:
#           python.version: '3.10'

#     steps:
#     - task: UsePythonVersion@0
#       inputs:
#         versionSpec: '$(python.version)'
#       displayName: 'Use Python $(python.version)'

#     - script: |
#         python -m pip install --upgrade pip
#         make install
#       displayName: 'Install dependencies'

#     - script: make code
#       displayName: 'Linting and code formatting check'

#     - script: make test
#       displayName: Test

#     - task: PublishTestResults@2
#       displayName: "Publish Test Results junit/*"
#       condition: always()
#       inputs:
#         testResultsFiles: "junit/*"
#         testRunTitle: "Python $(python.version)"

#     - task: PublishCodeCoverageResults@1
#       displayName: "Publish Code Coverage Results"
#       inputs:
#         codeCoverageTool: Cobertura
#         summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'

- stage: Publish
  # dependsOn: Test
  jobs:
  - job: Publish
    displayName: "Build and publish"
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
      displayName: 'Use Python 3.9'

    - script: |
        make install
        python -m build -C--global-option=egg_info -C--global-option=--tag-build=$(buildTag) --wheel
      displayName: Build

    - task: TwineAuthenticate@1
      displayName: Twine Authenticate
      inputs:
        artifactFeed: $(project)/$(feed)

    - script: |
        python -m pip install twine
        python -m twine upload -r $(feed) --config-file $(PYPIRC_PATH) dist/*.whl
      displayName: Publish
